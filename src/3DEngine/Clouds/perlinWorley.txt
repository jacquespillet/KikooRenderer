// 2D voronoi noise.
float r(float n)
{
 	return fract(cos(n*89.42)*343.42);
}

vec3 r(vec3 n)
{
 	return vec3(r(n.x*23.62-300.0+n.y*34.35 + n.z*56.35),r(n.x*45.13+256.0+n.y*38.89 + n.z*32.35), r(n.x*45.13+256.0+n.y*38.89 + n.z*43.35)); 
}

float voronoi2D(in vec3 n)
{
    float dis = 2.0;
    for (int z= -1; z <= 1; z++) 
    {
        for (int y= -1; y <= 1; y++) 
        {
            for (int x= -1; x <= 1; x++) 
            {
                // Neighbor place in the grid
                vec3 p = floor(n) + vec3(x,y, z);

                float d = length(r(p) + vec3(x, y, z) - fract(n));
                if (dis > d)
                {
                    dis = d;   
                }
            }
        }
    }
    
    return 1.0 - dis;
}


#define MOD3 vec3(.1031,.11369,.13787)

vec3 hash( vec3 p )
{
	p = vec3( dot(p,vec3(127.1,311.7, 74.7)),
			  dot(p,vec3(269.5,183.3,246.1)),
			  dot(p,vec3(113.5,271.9,124.6)));

	return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

// 3D Gradient noise by iq.
float noise3D( in vec3 p )
{
    vec3 i = floor( p );
    vec3 f = fract( p );
	
	vec3 u = f*f*(3.0-2.0*f);

    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), 
                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),
                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), 
                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),
                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), 
                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),
                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), 
                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 q = fragCoord.xy / iResolution.xy;
    vec2 uv = -1.0 + 2.0 * q;
    uv.x *= iResolution.x/iResolution.y;
    uv *= 4.;
    
    
    mat2 m = mat2(1.5, 1.3, -1.5, 1.3 );
    
    float w = (1.0 + noise3D(vec3(uv, iTime * 0.25))) * 
              ((1.0 + voronoi2D(vec3(uv, iTime * 0.25))) + 
              (0.5 * voronoi2D(vec3(uv, iTime * 0.25) * 2.)) + 
              (0.25 * voronoi2D(vec3(uv, iTime * 0.25) * 4.)));

    // Draw the min distance (distance field)
    vec3 color = vec3(w / 4.0);

    fragColor = vec4(color, 1.0);
}